<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevSetGo</title>
    <link>https://example.com/</link>
    <description>Recent content on DevSetGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_US</language>
    <lastBuildDate>Wed, 26 Dec 2018 17:57:50 -0500</lastBuildDate>
    
	<atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Starlette SRT Dashboard</title>
      <link>https://example.com/projects/starlette-srtdash/</link>
      <pubDate>Sat, 10 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>https://example.com/projects/starlette-srtdash/</guid>
      <description>Starlette Admin with SRT Dashboard This project is to serve as an experiment to learn starlette and a basic template for other projects. It is built with the SRT Dashboard template.
Currently running at SRTDash.DevSetGo.com   ChangeLog
Would love to have help to build a great example for others to use.
How to Use  See project README.md for up-to-date documentatione  Use it  git clone https://github.</description>
    </item>
    
    <item>
      <title>Using Spring Cloud Config with Python Requests</title>
      <link>https://example.com/posts/2019-4-22-spring-cloud-config/</link>
      <pubDate>Mon, 22 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2019-4-22-spring-cloud-config/</guid>
      <description>At work we use Spring Cloud Config as part of are management of external dependencies for JAVA APIs. So I thought this would be useful to manage dependencies for Python applications also and an effective way of dealing with external environment variables when deploying a docker image as part of a Twelve Factor App.
Why is this important?
 You don&amp;rsquo;t want to hardcode your configuration (keys, IP address, userid, passwords) Deploying .</description>
    </item>
    
    <item>
      <title>Python FastAPI Library</title>
      <link>https://example.com/posts/2019-4-20-python-fastapi/</link>
      <pubDate>Sat, 20 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2019-4-20-python-fastapi/</guid>
      <description>Over the last few months I have been learning Python&amp;rsquo;s Asyncio library. It came from a need at work. I needed to pull a large about of data from Sonarqube. The data is broke into pages of 500 issues each and it required about 50 calls to retrieve all the issues. Using Requests this took about 8-10 minutes via synchronous calls. Each page load being 4-8 seconds and the data processing at the end (about 10 seconds).</description>
    </item>
    
    <item>
      <title>Test API</title>
      <link>https://example.com/projects/test-api/</link>
      <pubDate>Sat, 20 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>https://example.com/projects/test-api/</guid>
      <description>Test API This project is to serve as an experiment to learn FastApi and serve as a useful API to serve psuedo data when needed in other projects.
Currently running at Test-API.DevSetGo.com - OpenAPI/Swagger UI @ Test-API.DevSetGo.com/docs - ReDoc @ Test-API.DevSetGo.com/ReDoc
ChangeLog
Would love to have help to build a great example for others to use.
How to Use  See project README.md More and better documentation to come  TODO Refactor by endpoint (ToDo, User, etc.</description>
    </item>
    
    <item>
      <title>Python Async</title>
      <link>https://example.com/posts/2019-2-2-python-async/</link>
      <pubDate>Sat, 02 Feb 2019 18:26:39 -0500</pubDate>
      
      <guid>https://example.com/posts/2019-2-2-python-async/</guid>
      <description>I have been trying to learn Python async and await. It is a great concept, but also a different way of programming. The image below is a visual of what asynchronous vs synchronous calls are. The advantage is gained if there is a wait for a response like in a REST call, where you are waiting on the server to respond. The idea is to let the application release the thread, perform some other action, then come back to the call when it returns.</description>
    </item>
    
    <item>
      <title>Cookiecutter-Flask-SBAdmin</title>
      <link>https://example.com/projects/cookiecutter-flask-sbadmin/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 -0001</pubDate>
      
      <guid>https://example.com/projects/cookiecutter-flask-sbadmin/</guid>
      <description>A Flask template for cookiecutter using SB Admin Bootstrap template. Forked from CookieCutter-Flask at version 0.12.0.
This is to have a simpler version using SB Admin as I don&amp;rsquo;t want NPM or Bower as part of my apps.
Tested with modern Python (3.5 and higher).
Built with cookiecutter
ToDo  Make docker ready deployments Deploy a running example on Docker Clean up of resources to remove unused/needed functionality  Give it a try!</description>
    </item>
    
    <item>
      <title>Learning Camunda</title>
      <link>https://example.com/projects/learning-camunda/</link>
      <pubDate>Sat, 12 Jan 2019 11:00:00 +0000</pubDate>
      
      <guid>https://example.com/projects/learning-camunda/</guid>
      <description>Camunda-BPM-Learning Project to store what I learn about Camunda and use for future base projects. Camunda BPM Documents (https://docs.camunda.org) - currently built on v7.9
ChangeLog
Find all Camunda related posts.
Things in the example [0.1.4.5] - 2019-12-11 Added  Added Spring Actuator Enabled all endpoints at /actuator-endpoint Pushed new docker container Updating to Camunda 7.10.0 and SpringBoot Starter 3.2.0 from the November release Update of BPMN processes to use the new Tasklist-startable Process Definitions to prevent processes that should not be the start to be exposed to the WebApp UI  As of 0.</description>
    </item>
    
    <item>
      <title>Cookiecutter Flask SB Admin</title>
      <link>https://example.com/posts/2019-1-1-cookiecutter-flask-sbadmin/</link>
      <pubDate>Tue, 01 Jan 2019 21:54:49 -0500</pubDate>
      
      <guid>https://example.com/posts/2019-1-1-cookiecutter-flask-sbadmin/</guid>
      <description>Cookiecutter is a template builder for Python applications. Steven Loria has a great and popular cookiecutter-flask that is a great starting point. I have been wanting to use a dashboard style bootstrap template called SB Admin. I have a couple projects I have been working to adapt the template too. The idea to create a cookiecutter came from looking back at Steven Loria&amp;rsquo;s cookiecutter to work on flask-login and blueprints.</description>
    </item>
    
    <item>
      <title>Current Work</title>
      <link>https://example.com/posts/2018-12-26-current-work/</link>
      <pubDate>Wed, 26 Dec 2018 23:16:49 -0500</pubDate>
      
      <guid>https://example.com/posts/2018-12-26-current-work/</guid>
      <description>Some interesting stuff I&amp;rsquo;ve been reading about or looking into.
 Flask Blueprints - I&amp;rsquo;ve been reading about flask blueprints and building a basic template to utilize. Need to add in a User management with Flask-Login and my template should be done. Kubernettes - This is the competitor to Docker Swarm. I will be using it at work. Still runs the docker enginer, but is supposed to be a better cluster management platform.</description>
    </item>
    
    <item>
      <title>And We Are Back...</title>
      <link>https://example.com/posts/2018-12-26-and-we-are-back/</link>
      <pubDate>Wed, 26 Dec 2018 22:39:11 -0500</pubDate>
      
      <guid>https://example.com/posts/2018-12-26-and-we-are-back/</guid>
      <description>So I broke my last site (or two). I had been using Wordpress and decided I wanted something light weight. So I started playing with Ghost and eventually had it running on my Docker instance. Initially I had it setup to learn and test, while also using it as my blog. Then I ran into a lot of issues&amp;hellip; way more than you should run into when learning/building a blog.</description>
    </item>
    
    <item>
      <title>Flask Sufee Admin</title>
      <link>https://example.com/projects/flask-sufee-admin/</link>
      <pubDate>Wed, 26 Dec 2018 17:57:50 -0500</pubDate>
      
      <guid>https://example.com/projects/flask-sufee-admin/</guid>
      <description>Sufee HTML5 Admin Dashboard Template (for Flask!) Sufee is a responsive Bootstrap 4 Admin Template. It provides you with a collection of ready to use code snippets and utilities, custom pages, a collection of applications and some useful widgets. Preview of this awesome admin template available here: https://colorlib.com/polygon/sufee/index.html
 project forked to setup to use in a Flask project.  Demo Site: Here TOC  Built With Changelog Authors License  Built With  Flask Sass Bootstrap Chart.</description>
    </item>
    
    <item>
      <title>Pynote</title>
      <link>https://example.com/projects/pynote/</link>
      <pubDate>Wed, 26 Dec 2018 17:57:50 -0500</pubDate>
      
      <guid>https://example.com/projects/pynote/</guid>
      <description>Journal, Idea Tracker and Other things. This application is based and built off Flask-AppBuilder by dpgaspar
Running demo hosted at pynote.devsetgo.com
 username Admin password $Password  Run the application from OS Prerequisits * Python (3.5) * virtualenv
Run the application * create a virtual environment - virtualenv env * Install Requirements in Virtual Environment - pip install -r requirements.txt * fabmanger create-admin - Follow instructions * fabmanger Run - Application is now running - Test and modify code as you want</description>
    </item>
    
  </channel>
</rss>